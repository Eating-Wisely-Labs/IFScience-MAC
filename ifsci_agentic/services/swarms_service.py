"""
Swarms Service Module.

This module provides functionality for interacting with Swarms API.
"""

# Standard library imports
import asyncio
import os
import yaml
from typing import List, Dict

# Third-party imports
from swarms import Agent

# Local imports
from ifsci_agentic.services.gpt4_vision_api import GPT4VisionAPI

# Retrieve the OpenAI API key from environment variables for security.
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    raise EnvironmentError("Please set the 'OPENAI_API_KEY' environment variable.")


def load_config(file_path: str) -> Dict:
    """Attempt to load a configuration from a YAML file.
    
    Args:
        file_path (str): Path to the YAML configuration file.
    
    Returns:
        Dict: Parsed YAML configuration as a dictionary.
    
    Raises:
        FileNotFoundError: If the YAML file does not exist.
    """
    try:
        with open(file_path, "r") as file:
            return yaml.safe_load(file)
    except FileNotFoundError as e:
        raise FileNotFoundError(f"The {file_path} file is missing.") from e
    except yaml.YAMLError as e:
        raise yaml.YAMLError("Failed to parse YAML file.") from e


config = load_config("../configs/ifs_reply_agent.yaml")

# Initialize the GPT4VisionAPI with necessary configurations.
model = GPT4VisionAPI(
    openai_api_key=OPENAI_API_KEY,
    model_name="gpt-4o"
)

swarm_reply_agent = Agent(
    llm=model,
    max_loops=1,
    autosave=True,
    dashboard=True,
    multi_modal=True,
    system_prompt=config["system_prompt"]
)


async def get_food_reply(comments: List[Dict]) -> Dict:
    """Generate a reply based on user comments by invoking the Swarms Agent.
    
    Args:
        comments (List[Dict]): User comments as a list of dictionaries.
    
    Returns:
        Dict: The response generated by the agent.
    """
    messages = [{"role": "system", "content": config["system_prompt"]}] + comments
    return await get_swarms_response(messages)


async def get_swarms_response(messages: List[Dict]) -> Dict:
    """Process messages using the Swarms Agent and return the response.
    
    Args:
        messages (List[Dict]): List of message dictionaries to process.
    
    Returns:
        Dict: The response from the Swarms Agent.
    
    Raises:
        Exception: Raises an exception if the agent encounters an error during processing.
    """
    try:
        return swarm_reply_agent.run(messages=messages)
    except Exception as e:
        raise Exception(f"Agent processing failed: {e}") from e


if __name__ == '__main__':
    """Main function to orchestrate fetching replies for predefined comments."""
    comments = [
        {"role": "user", "content": [
            {"type": "text",
             "text": "What's this?"},
            {"type": "image_url",
             "image_url": {"url": "https://pbs.twimg.com/media/GfPLHWNbIAAyk8g?format=jpg&name=medium"}}
        ]}
    ]
    try:
        content = asyncio.run(get_food_reply(comments))
        print(content)
    except Exception as e:
        print(f"An error occurred: {e}")
